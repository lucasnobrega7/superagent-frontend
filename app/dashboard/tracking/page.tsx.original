'use client';

import { useState, useEffect } from 'react';
import { useUser } from '@clerk/nextjs';
import literalai from '@/lib/literalai';
import { LiteralClient } from '@literalai/client';

export default function TrackingDashboard() {
  const { user, isLoaded } = useUser();
  const [threads, setThreads] = useState<any[]>([]);
  const [selectedThread, setSelectedThread] = useState<any>(null);
  const [steps, setSteps] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Carregar threads disponíveis
  useEffect(() => {
    if (!isLoaded) return;

    const loadThreads = async () => {
      try {
        setLoading(true);
        const client = literalai.getClient() as LiteralClient;
        
        if (!client || !client.thread) {
          setError('Cliente LiteralAI não está disponível');
          return;
        }
        
        const response = await client.thread.list();
        setThreads(response?.threads || []);
        setError(null);
      } catch (err) {
        console.error('Erro ao carregar threads:', err);
        setError('Não foi possível carregar as conversas');
      } finally {
        setLoading(false);
      }
    };

    loadThreads();
  }, [isLoaded]);

  // Carregar steps de uma thread selecionada
  useEffect(() => {
    if (!selectedThread) return;

    const loadSteps = async () => {
      try {
        setLoading(true);
        const client = literalai.getClient() as LiteralClient;
        
        if (!client || !client.step) {
          setError('Cliente LiteralAI não está disponível');
          return;
        }
        
        const response = await client.step.list(selectedThread.id);
        setSteps(response?.steps || []);
        setError(null);
      } catch (err) {
        console.error('Erro ao carregar steps:', err);
        setError('Não foi possível carregar os detalhes da conversa');
      } finally {
        setLoading(false);
      }
    };

    loadSteps();
  }, [selectedThread]);

  // Formatar data para exibição
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleString();
  };

  // Formatação do tipo de step
  const formatStepType = (type: string) => {
    switch (type) {
      case 'input': return 'Mensagem do usuário';
      case 'output': return 'Resposta do assistente';
      case 'retrieval': return 'Recuperação de dados';
      case 'error': return 'Erro';
      default: return type;
    }
  };

  // Cor baseada no tipo de step
  const getStepTypeColor = (type: string) => {
    switch (type) {
      case 'input': return 'bg-blue-100 border-blue-200';
      case 'output': return 'bg-green-100 border-green-200';
      case 'retrieval': return 'bg-purple-100 border-purple-200';
      case 'error': return 'bg-red-100 border-red-200';
      default: return 'bg-gray-100 border-gray-200';
    }
  };

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">Rastreamento de Conversas</h1>

      {loading && !error && (
        <div className="flex justify-center my-8">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      )}

      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative mb-6">
          {error}
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Lista de threads */}
        <div className="bg-white rounded-lg shadow p-4 md:col-span-1">
          <h2 className="text-lg font-semibold mb-4">Conversas</h2>
          
          {threads.length === 0 && !loading ? (
            <p className="text-gray-500">Nenhuma conversa encontrada</p>
          ) : (
            <ul className="divide-y divide-gray-200">
              {threads.map((thread) => (
                <li 
                  key={thread.id} 
                  className={`py-2 px-2 cursor-pointer hover:bg-gray-50 rounded ${
                    selectedThread?.id === thread.id ? 'bg-blue-50' : ''
                  }`}
                  onClick={() => setSelectedThread(thread)}
                >
                  <p className="font-medium">{thread.name}</p>
                  <p className="text-sm text-gray-500">
                    {formatDate(thread.createdAt || thread.created_at)}
                  </p>
                  {thread.metadata?.agentId && (
                    <p className="text-xs text-gray-400">
                      Agente: {thread.metadata.agentId}
                    </p>
                  )}
                </li>
              ))}
            </ul>
          )}
        </div>

        {/* Detalhes da thread e steps */}
        <div className="bg-white rounded-lg shadow p-4 md:col-span-2">
          {selectedThread ? (
            <>
              <h2 className="text-lg font-semibold mb-2">{selectedThread.name}</h2>
              <p className="text-sm text-gray-500 mb-4">
                Criado em {formatDate(selectedThread.createdAt || selectedThread.created_at)}
              </p>

              <h3 className="font-medium mt-6 mb-2">Timeline</h3>
              {steps.length === 0 ? (
                <p className="text-gray-500">Nenhum evento encontrado</p>
              ) : (
                <div className="space-y-3">
                  {steps.map((step) => (
                    <div 
                      key={step.id} 
                      className={`border rounded-lg p-3 ${getStepTypeColor(step.type)}`}
                    >
                      <div className="flex justify-between items-start">
                        <h4 className="font-medium">{step.name}</h4>
                        <span className="text-xs bg-white px-2 py-1 rounded-full">
                          {formatStepType(step.type)}
                        </span>
                      </div>
                      
                      <p className="text-sm text-gray-700 mt-2">
                        {step.metadata?.content || 'Sem conteúdo disponível'}
                      </p>
                      
                      <div className="mt-2 text-xs text-gray-500">
                        {formatDate(step.createdAt || step.created_at)}
                      </div>
                      
                      {/* Exibir metadados extras se disponíveis */}
                      {step.metadata && Object.keys(step.metadata).length > 0 && (
                        <details className="mt-2">
                          <summary className="text-xs text-gray-500 cursor-pointer">
                            Metadados
                          </summary>
                          <pre className="mt-1 text-xs bg-gray-50 p-2 rounded overflow-x-auto">
                            {JSON.stringify(step.metadata, null, 2)}
                          </pre>
                        </details>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </>
          ) : (
            <p className="text-gray-500">Selecione uma conversa para ver os detalhes</p>
          )}
        </div>
      </div>
    </div>
  );
}